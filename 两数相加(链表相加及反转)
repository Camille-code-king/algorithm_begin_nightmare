/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    ListNode* reverseListNode(ListNode* head){
        ListNode* pre=nullptr;
        ListNode* cur=head;
        while(cur){
            ListNode* nxt=cur->next;
            cur->next=pre;
            pre=cur;
            cur=nxt;
        }
        return pre;
    }
    ListNode* sumListNode(ListNode* l1,ListNode* l2,int carry=0){
        if(l1==nullptr&&l2==nullptr)
        return carry?new ListNode(carry):nullptr;
        if(l1==nullptr)swap(l1,l2);
        carry+=l1->val+(l2?l2->val:0);
        l1->val=carry%10;
        l1->next=sumListNode(l1->next,(l2?l2->next:nullptr),carry/10);
        return l1;
    }
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        l1=reverseListNode(l1);
        l2=reverseListNode(l2);
        auto l3=sumListNode(l1,l2);
        return reverseListNode(l3);
    }
};
