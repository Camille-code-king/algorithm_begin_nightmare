/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 #include<vector>
 #include<map>
class Solution {
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        map<int,int>hash;
        auto def=[&](auto &&def,TreeNode* node){
            if(node==nullptr)return 0;
            int sum=def(def,node->left)+def(def,node->right)+node->val;
            hash[sum]++;
            return sum;
        };
        def(def,root);
        vector<int>ans;
        int maxv=0;
        for(auto &[_,g]:hash)
        maxv=max(g,maxv);
        for(auto &[a,_]:hash){
        if(hash[a]==maxv)
        ans.emplace_back(a);
        }
        return ans;
    }
};
