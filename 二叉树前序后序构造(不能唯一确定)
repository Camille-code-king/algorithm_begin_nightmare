/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 #include<unordered_map>
class Solution {
public:
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        unordered_map<int,int>memo;
        int n=preorder.size();
        for(int i=0;i<n;i++)
        memo[postorder[i]]=i;
        auto dfs=[&](auto &&dfs,int pre_l,int pre_r,int pos_l,int pos_r)->TreeNode*{
            if(pre_l==pre_r)return nullptr;
            if(pre_l+1==pre_r)return new TreeNode(preorder[pre_l],nullptr,nullptr);
            int left_size=memo[preorder[pre_l+1]]-pos_l+1;
            TreeNode*left=dfs(dfs,pre_l+1,pre_l+1+left_size,pos_l,pos_l+left_size);
            TreeNode*right=dfs(dfs,pre_l+left_size+1,pre_r,pos_l+left_size,pos_r-1);
            return new TreeNode(preorder[pre_l],left,right); 
        };
        return dfs(dfs,0,n,0,n);
    }
};
