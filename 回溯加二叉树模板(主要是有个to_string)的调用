/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        string path;
        vector<string>ans;
        auto dfs=[&](auto&&dfs,TreeNode*node){
            if(node==nullptr){
                return;
            }
            if(node->left==node->right){
                path+=to_string(node->val);
                ans.push_back(path);
                return;
            }else{
                path+=to_string(node->val)+"->";
            }
            string temp=path;
            dfs(dfs,node->left);
            path=temp;
            dfs(dfs,node->right);
        };
        dfs(dfs,root);
        return ans;
    }
};
